//Originally there to place excitons on their own segments randomly. All segments were included as initial exciton locations


/*
	Now that the tables have been built, the next step is to populate the mesh with excitons. The way this will happen
	is, after a specific number of excitons are chosen to be created, each exciton will be created and assigned an index
	that corresponds to the CNT mesh. First a random CNT will be chosen. This choice will come from a weighted probability
	distribution, the weight being placed on the number of segments each CNT has vs the total number of segments. After the
	CNT number is chosen, then the segment will be chosen from the segments part of the CNT.
	*/

	//////////////////////////// PLACE EXCITON RANDOMLY //////////////////////////////////////////

//Build the probability vector for CNTs
	shared_ptr<vector<double>> cntProb(new vector<double>(CNT_List->size()));

	//Must set first index so that rest of the table can be built with simple loop
	vector<CNT>::iterator it = CNT_List->begin();
	(*cntProb)[0] = it->segs->size() / static_cast<double>(numSegs);
	++it;

	auto cntIdx = 1; //keeps index of cntProb vector as iterate through CNT_List
	for ( it; it != CNT_List->end(); ++it)
	{
		(*cntProb)[cntIdx] = it->segs->size() / static_cast<double>(numSegs)+(*cntProb)[cntIdx - 1];
		cntIdx++;
	}

	int numExcitons = 10; //number of excitons to add to simulation

	if (numExcitons > 2*numSegs)
	{
		cout << "Error: More excitons than possible number of places for them in simulation.\n";
		system("pause");
		exit(EXIT_FAILURE);
	}
	
	//vector that stores all excitons
	shared_ptr<vector<shared_ptr<exciton>>> excitons(new vector<shared_ptr<exciton>>(numExcitons)); 

	//assigns excitons to initial locations
	for (UINT32 exNum = 0; exNum < excitons->size(); exNum++)
	{
		done = false; // Flag for successful exciton assignment
		(*excitons)[exNum] = make_shared<exciton>(exciton());
		//go until suitable position for exciton is found
		while (!done)
		{
			//randomly sets energy level to 1 or 2
			(*excitons)[exNum]->setEnergy(static_cast<int>(round(getRand(false)) + 1));
			(*excitons)[exNum]->setCNTidx(getIndex(cntProb, getRand(false)));
			//sets seg index to a number between 0 and the number of segs for the cnt - 1.
			//  The complicated part gets the number of segments from the current cnt
			(*excitons)[exNum]->setSegidx(rand() % ((*CNT_List)[(*excitons)[exNum]->getCNTidx()].segs->size()));
			shared_ptr<vector<shared_ptr<segment>>> temp((*CNT_List)[(*excitons)[exNum]->getCNTidx()].segs); //get segment list
			done = ((*temp)[(*excitons)[exNum]->getSegidx()])->setExciton((*excitons)[exNum]);
		}
	}